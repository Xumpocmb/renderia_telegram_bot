from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import os
from tg_bot.service.api_requests import get_all_questions, get_answer_by_question_id
from tg_bot.handlers.inline_handlers.main_menu import get_user_keyboard
from tg_bot.configs.bot_messages import FAQ_EMPTY, FAQ_SELECT, FAQ_ANSWER_NOT_FOUND

faq_router = Router()


@faq_router.callback_query(F.data == "faq")
async def faq_handler(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É FAQ.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.
    """
    questions = await get_all_questions()
    if not questions:
        await callback.message.answer(FAQ_EMPTY)
        await callback.answer()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–ª–ª–±—ç–∫
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    keyboard = InlineKeyboardBuilder()

    keyboard.button(text="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è –≤ RENDERIA", callback_data="study_programms")

    for question in questions:
        keyboard.button(text=question["question"], callback_data=f"faq_question_{question['id']}")
    keyboard.button(text="<< –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="inline_main_menu")
    keyboard.adjust(1)

    await callback.message.edit_text(FAQ_SELECT, reply_markup=keyboard.as_markup())
    await callback.answer()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–ª–ª–±—ç–∫


@faq_router.callback_query(F.data.startswith("faq_question_"))
async def handle_faq_question(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.
    """
    question_id = callback.data.split("_")[-1]
    answer_data = await get_answer_by_question_id(question_id)
    if not answer_data:
        await callback.message.answer(FAQ_ANSWER_NOT_FOUND)
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="<< –ù–∞–∑–∞–¥", callback_data="faq")
    keyboard.adjust(1)

    await callback.message.edit_text(
        f"<b>–í–æ–ø—Ä–æ—Å:</b> {answer_data['question']}\n\n<b>–û—Ç–≤–µ—Ç:</b> {answer_data['answer']}",
        reply_markup=keyboard.as_markup(),
    )
    await callback.answer()


@faq_router.callback_query(F.data == "study_programms")
async def study_programms_handler(callback: CallbackQuery):
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ú–ª–∞–¥—à–∞—è –≥—Ä—É–ø–ø–∞ 6-8 –ª–µ—Ç", callback_data="study_programm_junior")
        keyboard.button(text="–°—Ä–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞ 9-11 –ª–µ—Ç", callback_data="study_programm_middle")
        keyboard.button(text="–°—Ç–∞—Ä—à–∞—è –≥—Ä—É–ø–ø–∞ 12-14 –ª–µ—Ç", callback_data="study_programm_senior")
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="faq")
        keyboard.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
        await callback.message.edit_text(
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è –≤ RENDERIA\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É:",
            reply_markup=keyboard.as_markup()
        )
    except Exception as e:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é")
    finally:
        await callback.answer()


@faq_router.callback_query(F.data == "study_programm_junior")
async def study_programm_junior_handler(callback: CallbackQuery):
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="study_programms")
        keyboard.adjust(1)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        await callback.message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è –≤ RENDERIA - –ú–ª–∞–¥—à–∞—è –≥—Ä—É–ø–ø–∞\n–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è..")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è –º–ª–∞–¥—à–µ–π –≥—Ä—É–ø–ø—ã
        file_path = "tg_bot/files/study_programs/junior_RENDERIA.pdf"
        if os.path.isfile(file_path):
            await callback.message.answer_document(
                types.FSInputFile(file_path), 
                caption="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è - –ú–ª–∞–¥—à–∞—è –≥—Ä—É–ø–ø–∞",
                reply_markup=keyboard.as_markup()
            )
        else:
            await callback.message.answer("–§–∞–π–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=keyboard.as_markup())
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    finally:
        await callback.answer()


@faq_router.callback_query(F.data == "study_programm_middle")
async def study_programm_middle_handler(callback: CallbackQuery):
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="study_programms")
        keyboard.adjust(1)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        await callback.message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è –≤ RENDERIA - –°—Ä–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞\n–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è..")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π –≥—Ä—É–ø–ø—ã
        file_path = "tg_bot/files/study_programs/middle_RENDERIA.pdf"
        if os.path.isfile(file_path):
            await callback.message.answer_document(
                types.FSInputFile(file_path), 
                caption="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è - –°—Ä–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞",
                reply_markup=keyboard.as_markup()
            )
        else:
            await callback.message.answer("–§–∞–π–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=keyboard.as_markup())
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    finally:
        await callback.answer()


@faq_router.callback_query(F.data == "study_programm_senior")
async def study_programm_senior_handler(callback: CallbackQuery):
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="study_programms")
        keyboard.adjust(1)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        await callback.message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è –≤ RENDERIA - –°—Ç–∞—Ä—à–∞—è –≥—Ä—É–ø–ø–∞\n–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è..")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è —Å—Ç–∞—Ä—à–µ–π –≥—Ä—É–ø–ø—ã
        file_path = "tg_bot/files/study_programs/senior_RENDERIA.pdf"
        if os.path.isfile(file_path):
            await callback.message.answer_document(
                types.FSInputFile(file_path), 
                caption="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è - –°—Ç–∞—Ä—à–∞—è –≥—Ä—É–ø–ø–∞",
                reply_markup=keyboard.as_markup()
            )
        else:
            await callback.message.answer("–§–∞–π–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=keyboard.as_markup())
    except Exception as e:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞")
    finally:
        await callback.answer()
